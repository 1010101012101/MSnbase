% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SpectrumList.R, R/SpectrumList-methods.R
\docType{methods}
\name{SpectrumList}
\alias{SpectrumList}
\alias{SpectrumList-class}
\alias{show,SpectrumList-method}
\alias{mz,SpectrumList-method}
\alias{intensity,SpectrumList-method}
\alias{rtime,SpectrumList-method}
\alias{precursorMz,SpectrumList-method}
\alias{precursorCharge,SpectrumList-method}
\alias{precScanNum,SpectrumList-method}
\alias{precursorIntensity,SpectrumList-method}
\alias{acquisitionNum,SpectrumList-method}
\alias{scanIndex,SpectrumList-method}
\alias{peaksCount,SpectrumList,ANY-method}
\alias{msLevel,SpectrumList-method}
\alias{tic,SpectrumList-method}
\alias{ionCount,SpectrumList-method}
\alias{collisionEnergy,SpectrumList-method}
\alias{fromFile,SpectrumList-method}
\alias{polarity,SpectrumList-method}
\alias{smoothed,SpectrumList-method}
\alias{isEmpty,SpectrumList-method}
\alias{centroided,SpectrumList-method}
\alias{isCentroided,SpectrumList-method}
\title{List of Spectrum objects along with annotations}
\usage{
SpectrumList(..., elementMetadata = NULL)

\S4method{mz}{SpectrumList}(object)

\S4method{intensity}{SpectrumList}(object)

\S4method{rtime}{SpectrumList}(object)

\S4method{precursorMz}{SpectrumList}(object)

\S4method{precursorCharge}{SpectrumList}(object)

\S4method{precScanNum}{SpectrumList}(object)

\S4method{precursorIntensity}{SpectrumList}(object)

\S4method{acquisitionNum}{SpectrumList}(object)

\S4method{scanIndex}{SpectrumList}(object)

\S4method{peaksCount}{SpectrumList,ANY}(object)

\S4method{msLevel}{SpectrumList}(object)

\S4method{tic}{SpectrumList}(object)

\S4method{ionCount}{SpectrumList}(object)

\S4method{collisionEnergy}{SpectrumList}(object)

\S4method{fromFile}{SpectrumList}(object)

\S4method{polarity}{SpectrumList}(object)

\S4method{smoothed}{SpectrumList}(object)

\S4method{isEmpty}{SpectrumList}(x)

\S4method{centroided}{SpectrumList}(object)

\S4method{isCentroided}{SpectrumList}(object)
}
\arguments{
\item{...}{\link{Spectrum} object(s) or a \code{list} of \link{Spectrum} objects.}

\item{elementMetadata}{\link{DataFrame} with optional information that should
be added as metadata information (\code{mcols}) to the object. The number
of rows has to match the number of \link{Spectrum} objects, each row is
expected to represent additional metadata information for one spectrum.}

\item{object}{a \code{SpectrumList} object.}

\item{x}{a \code{SpectrumList} object.}
}
\description{
\code{SpectrumList} objects allow to collect one or more \link{Spectrum} object(s)
(\link{Spectrum1} or \link{Spectrum2}) in a \code{list}-like structure with the additional
possibility to add arbitrary annotations to each individual \link{Spectrum}
object. These can be accessed/set with the \link{mcols} method.
}
\details{
\code{SpectrumList} inherits all methods from the \link{SimpleList} class of the
\code{S4Vectors} package. This includes \code{lapply} and other data manipulation
and subsetting operations.
}
\section{Constructor}{


New \link{SpectrumList} can be created with the \code{SpectrumList(...)} function
where \code{...} can either be a single \link{Spectrum} object or a \code{list} of
\link{Spectrum} objects (\link{Spectrum1} and/or \link{Spectrum2}).
}

\section{Accessing spectrum attributes}{


These methods allow to access the attributes and values of the individual
[Spectrum] ([Spectrum1] or [Spectrum2]) objects within the list.

- `mz` return the m/z values of each spectrum as a `list` of `numeric`
  vectors.

- `intensity` return the intensity values of each spectrum as a `list` of
  `numeric` vectors.

- `rtime` return the retention time of each spectrum as a `numeric` vector
  with length equal to the length of `object`.

- `precursorMz`, `precursorCharge`, `precursorIntensity`, `precScanNum`
  return precursor m/z values, charge, intensity and scan number for each
  spectrum as a `numeric` (or `integer`) vector with length equal to the
  length of `object`. Note that for [Spectrum1] objects `NA` will be
  returned.

- `acquisitionNum` and `scanIndex` return the acquisition number of each
  spectrum and its scan index as an `integer` vector with the same length
  than `object`.

- `ionCount` and `tic` return the ion count and total ion current of each
  spectrum.

- `peaksCount` returns the number of peaks for each spectrum as a `integer`
  vector.

- `msLevel` returns the MS level of each spectrum.

- `collisionEnergy` returns the collision energy for each spectrum or `NA`
  for [Spectrum1] objects.

- `polarity` returns the spectra's polarity.

- `fromFile` returns the index from the (e.g. mzML) file the spectra where
  from. This applies only for spectra read using the [readMSData] function.

- `smoothed` whether spectra have been smoothed (i.e. processed with the
  [smooth] method. Returns a `logical` of length equal to the
  number of spectra.

- `isEmpty` returns `TRUE` for spectra without peak data.

- `centroided`, `isCentroided` returns for each spectrum whether it contains
  *centroided* data. While `centroided` returns the internal attribute of
  each spectrum, `isCentroided` tries to guess whether spectra are
  centroided from the actual peak data.
}

\examples{

## Create from Spectrum objects
sp1 <- new("Spectrum1", mz = c(1, 2, 4), intensity = c(4, 5, 2))
sp2 <- new("Spectrum2", mz = c(1, 2, 3, 4), intensity = c(5, 3, 2, 5),
    precursorMz = 2)

spl <- SpectrumList(sp1, sp2)
spl
spl[[1]]

## Add also metadata columns
mcols(spl)$id <- c("a", "b")
mcols(spl)

## Create a SpectrumList with metadata
spl <- SpectrumList(sp1, sp2, elementMetadata = DataFrame(id = c("a", "b")))

mcols(spl)
mcols(spl)$id

## Extract the mz values for the individual spectra
mz(spl)

## Extract the intensity values for the individual spectra
intensity(spl)

## Extract the retention time values for the individual spectra
rtime(spl)

## Extract the precursor m/z of each spectrum.
precursorMz(spl)

## Extract the precursor charge of each spectrum.
precursorCharge(spl)

## Extract the precursor scan number for each spectrum.
precScanNum(spl)

## Extract the precursor intensity of each spectrum.
precursorIntensity(spl)

## Extract the acquisition number of each spectrum.
acquisitionNum(spl)

## Extract the scan index of each spectrum.
scanIndex(spl)

## Get the number of peaks per spectrum.
peaksCount(spl)

## Get the MS level of each spectrum.
msLevel(spl)

## Get the total ion current for each spectrum.
tic(spl)

## Get the total ion current for each spectrum.
ionCount(spl)

## Extract the collision energy for spectrum.
collisionEnergy(spl)

## Extract the file index for the spectrum.
fromFile(spl)

## Get the polarity for each spectrum.
polarity(spl)

## Whether spectra are smoothed (i.e. processed with the `MSnbase::smooth`
## function.
smoothed(spl)

## Are spectra empty (i.e. contain no peak data)?
isEmpty(spl)

## Do the spectra contain centroided data?
centroided(spl)

## Do the spectra contain centroided data? Whether spectra are centroided
## is estimated from the peak data.
isCentroided(spl)
}
\author{
Johannes Rainer
}
